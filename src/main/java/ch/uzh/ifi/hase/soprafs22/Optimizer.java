package ch.uzh.ifi.hase.soprafs22;

import ch.uzh.ifi.hase.soprafs22.constant.Weekday;
import ch.uzh.ifi.hase.soprafs22.entity.*;


import ch.uzh.ifi.hase.soprafs22.service.TeamCalendarService;
import ilog.concert.IloException;
import ilog.concert.IloNumExpr;
import ilog.concert.IloNumVar;
import ilog.cplex.IloCplex;
import javassist.compiler.ast.Pair;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;


public class Optimizer {


    public int nDays = 0;
    public int nSlots = 0;
    public int nUsers = 0;
    private final Logger log = LoggerFactory.getLogger(TeamCalendarService.class);

    public Schedule[][][] schedules;
    public int[][][] base;  // user - day - slot
    public int[][][] special; // user - day - slot
    public int[][] requirements; // day - slot
    public TeamCalendar teamCalendar;

    //public Long[] capacityOverall; // for each user
    //public Long[] capacityDaily; // now specific for each user, could be fixed or specific for user and day
   // public String[] roles;

    public IloNumVar[][][] x; // user - day - slot
    private IloCplex cplex; // check


    public Optimizer(TeamCalendar calendar ) {
        try{
            this.cplex =  new IloCplex();
        initialize(calendar); // computes n and stores calendar as a field

        // Initialize the model. It is important to initialize the variables first!
        addVariables();
        addSpecialRequirementConstraint();
        //addCapacityOverallConstraint();
        //capacityDailyConstraint();
        requirementConstraint();
        addObjective();
        // Optionally: export the model to a file, so we can check the mathematical
        // program generated by CPLEX
        //cplex.exportModel("model.lp");
        solve();
        }
        catch (IloException e) {
            log.debug("Probably there is no possible solution");
        }
        catch (java.lang.UnsatisfiedLinkError e) {
            log.debug("cplex is not installed");
        }

    }

    public void solve() throws IloException {

        cplex.solve();

        for (int i = 0; i < x.length; i++) {
            for (int j = 0; j < x[i].length; j++) {
                for (int k = 0; k < x[i][j].length; k++) {
                        if (cplex.getValue(x[i][j][k])>= 0.5){
                            this.schedules[i][j][k].setAssigned(1);
                        }
                        else { this.schedules[i][j][k].setAssigned(0);
                        // flush calendar
                    }
                }
            }
        }
    }

    // 4-d array of variables
    private void addVariables() throws IloException {
        for (int i = 0; i < this.teamCalendar.getBasePlan().size(); i++) {
            for (int j = 0; j < this.teamCalendar.getBasePlan().get(i).getSlots().size(); j++) {
                requirements[i][j] = this.teamCalendar.getBasePlan().get(i).getSlots().get(j).getRequirement();
                for (int k = 0; k < this.teamCalendar.getBasePlan().get(i).getSlots().get(j).getSchedules().size(); k++) {
                        IloNumVar var = cplex.boolVar();
                        x[i][j][k] = var;
                        schedules[i][j][k] = this.teamCalendar.getBasePlan().get(i).getSlots().get(j).getSchedules().get(k);
                        base[i][j][k] = this.teamCalendar.getBasePlan().get(i).getSlots().get(j).getSchedules().get(k).getBase();
                        special[i][j][k] = this.teamCalendar.getBasePlan().get(i).getSlots().get(j).getSchedules().get(k).getSpecial();
                }
            }
        }
    }

    private void initialize(TeamCalendar teamCalendar) throws IloException {
        this.teamCalendar = teamCalendar;
        this.nDays = this.teamCalendar.getBasePlan().size();
        // count n slot and n users
        for (Day day: teamCalendar.getBasePlan()) {
            for (int j = 0; j < day.getSlots().size(); j++) {
                for (int k = 0; k < day.getSlots().get(j).getSchedules().size(); k++) {
                    if ((k+1) > this.nUsers) this.nUsers = k+1;
                }
                if ((j+1) > this.nSlots) this.nSlots = j+1;
            }
        }

        this.x = new IloNumVar[nDays][nSlots][nUsers];
        this.schedules = new Schedule[nDays][nSlots][nUsers];
        this.base = new int[nDays][nSlots][nUsers];
        this.special = new int[nDays][nSlots][nUsers];
        this.requirements = new int[nDays][nSlots];

    }


    public boolean isFeasible() throws IloException {
        return cplex.isPrimalFeasible();
    }



    private void addObjective() throws IloException {
        // Initialize the objective sum to 0
        IloNumExpr obj = cplex.constant(0);
        for (int i = 0; i < x.length; i++) {
            for (int j = 0; j < x[i].length; j++) {
                for (int k = 0; k < x[i][j].length; k++) {
                    IloNumExpr expr = x[i][j][k];
                    IloNumExpr term = cplex.prod(expr, base[i][j][k]);
                    obj = cplex.sum(obj, term);
                }
            }
        }
        // Add the obj expression as a maximization objective
        cplex.addMaximize(obj);
    }

    // constraint: special req are satisfied
    private void addSpecialRequirementConstraint() throws IloException {
        for (int i = 0; i < x.length; i++) {
            for (int j = 0; j < x[i].length; j++) {
                for (int k = 0; k < x[i][j].length; k++) {
                    if(special[i][j][k] !=-1){
                    IloNumExpr lhs = x[i][j][k];
                    cplex.addEq(lhs, special[i][j][k]);
                    }
                }
            }
        }
    }


/*
    private void addCapacityOverallConstraint() throws IloException {
        for (int i = 0; i < x.length; i++) {
            // for each person compute sum of hours working and specify that it is not more than some contant
            IloNumExpr lhs = cplex.constant(0);
            for (int j = 0; j < x[i].length; j++) {
                for (int k = 0; k < x[i][j].length; k++) {
                        IloNumExpr term = x[i][j][k];
                        lhs = cplex.sum(lhs, term);
                    }
                }
            cplex.addLe(lhs, 60);
        }
    }
*/


    private void requirementConstraint() throws IloException {
        // for each day each slot sum of users x which <= requirements for that day, slot
        // for each day
        for (int i = 0; i <x.length; i++) {
            // for each slot
            for (int j = 0; j < x[i].length; j++) {
               IloNumExpr lhs = cplex.constant(0);
               for (int k= 0; k< x[i][j].length; k++){
                   IloNumExpr term = x[i][j][k];
                   lhs = cplex.sum(lhs,  term);
                    }
                    cplex.addEq(lhs, requirements[i][j]);

                }
            }
        }
    }

